#include <pbr.h>

#line 9 "gtr_sample.vfl"

#line 1 "bsdf_utils.h"

vector SphericalDirection(float sintheta;
                          float costheta;
                          float phi) {
    return set(sintheta*cos(phi), sintheta*sin(phi), costheta);
}



vector SphericalDirection(float costheta;
                          float phi) {
    float sintheta = sqrt(max(0.0,1.0-costheta*costheta));
    return set(sintheta*cos(phi), sintheta*sin(phi), costheta);
}





float SphericalTheta(vector w) {
    return acos(clamp(w.z, -1.0, 1.0));
}





float SphericalPhi(vector w) {
    float p = atan2(w.y, w.x);
    return (p < 0.0) ? p + 6.28318530717958647692  : p;
}






float CosTheta    (vector w) { return w.z; }
float AbsCosTheta (vector w) { return abs(w.z); }
float CosThetaSqr (vector w) { return w.z*w.z; }
float SinTheta    (vector w) { return sqrt(SinThetaSqr(w)); }
float SinThetaSqr (vector w) { return max(0.0, 1.0 - w.z*w.z); }
float CosPhi      (vector w) { return w.x / SinTheta(w); }
float CosPhiSqr   (vector w) { float cph = CosPhi(w); return cph*cph; }
float SinPhi      (vector w) { return w.y / SinTheta(w); }
float SinPhiSqr   (vector w) { float sph = SinPhi(w); return sph*sph; }

float tanTheta(vector w) {
    float tmp = 1.0 - w.z*w.z;
    if (tmp <= 0.0)
        return 0.0;
    return sqrt(tmp)/w.z;
}
float tanThetaSqr(vector w) {
    float wSqr = w.z*w.z;
    float tmp = 1.0 - wSqr;
    if (tmp <= 0.0)
        return 0.0;
    return tmp/wSqr;
}





int SameHemisphere(vector w; vector wp) {
    return (w.z * wp.z) > 0.0f;
}






void ConcentricSampleDisk(float u1; 
                          float u2; 
                          export float dx; 
                          export float dy) {
    float r, theta;

    float sx = 2 * u1 - 1;
    float sy = 2 * u2 - 1;




    if (sx == 0.0 && sy == 0.0) {
        dx = 0.0;
        dy = 0.0;
        return;
    }
    if (sx >= -sy) {
        if (sx > sy) {

            r = sx;
            if (sy > 0.0) 
                theta = sy/r;
            else
                theta = 8.0f + sy/r;
        }
        else {

            r = sy;
            theta = 2.0f - sx/r;
        }
    }
    else {
        if (sx <= sy) {

            r = -sx;
            theta = 4.0f - sy/r;
        }
        else {

            r = -sy;
            theta = 6.0f + sx/r;
        }
    }
    theta *= 3.14159265358979323846  / 4.f;
    dx = r * cos(theta);
    dy = r * sin(theta);
}















struct UniformHemisphereSampler {
    vector sample(float u1; float u2;                      ) {
        float z = u1;
        float r = sqrt(max(0.f, 1.f - z*z));
        float phi = 2. * 3.14159265358979323846  * u2;
        float x = r * cos(phi);
        float y = r * sin(phi);
        return set(x,y,z);
    }
    float pdf() {
        return 0.5;
    }
    float pdf(vector w) {
        return 0.5;
    }
}







struct CosHemisphereSampler {
    float s_pdf = 0.0;
    vector sample(float u1; float u2;) {
        vector s = set(cos(u1*3.14159265358979323846 *2.),
                       sin(u1*3.14159265358979323846 *2.),
                       0.0);
        s *= sqrt(u2);
        s.z = sqrt(1. - u2);
        this.s_pdf = s.z *  2.0;
        return s;
    }
    float pdf() {
        return this.s_pdf * 2.0;
    }
    float pdf(float costheta) {

        return costheta * 2.0;
    }
}







struct CosHemisphereDiskSampler {
    float s_pdf = 0.0;
    vector sample(float u1; float u2;) {
        float s1 = 0;
        float s2 = 0;
        ConcentricSampleDisk(u1,u2,s1,s2);
        vector ret = set(s1, s2, sqrt(max(0., 1.f-s1*s1-s2*s2)));
        this.s_pdf = ret.z/3.14159265358979323846 ;
        return ret;
    }
    float pdf() {
        return this.s_pdf * 2.0;
    }
    float pdf(float costheta) {
        return costheta * 2.0;
    }
} 






void makebasis(export vector x; export vector y; const vector z) {
        if (abs(z.x) < 0.6)
                y = {1.0, 0.0, 0.0};
        else if (abs(z.z) < 0.6)
                y = {0.0, 1.0, 0.0};
        else
                y = {0.0, 0.0, 1.0};
        x = normalize(cross(y,z));
        y = cross(z,x);
}
void makebasis(export vector x; export vector y; const vector z; const vector u) {
    x = normalize(cross(z,u));
    if (length(x)== 0.0)
        makebasis(x,y,z);
    else
        y = cross(z,x);
}



#line 10 "gtr_sample.vfl"

#line 1 "gtr_bsdf.h"



float sqr(float v) {
    return v*v;
}

float schlick_f(float u) {
    float m = clamp(1.0-u, 0.0, 1.0);
    float m2 = m*m;
    return m2*m2*m; 
}





float smith_g(float Ndotv; float alphaG) {
    if (Ndotv <= 0.0) {
        return 0.0;
    }
    float a = alphaG*alphaG;
    float b = Ndotv*Ndotv;

    return 1.0/(Ndotv + sqrt(a + b - a*b));
}

float alpha_clamp(float alpha) {
        return max(0.0025, alpha);
}


#line 11 "gtr_sample.vfl"

cvex gtr_sample (

    vector u       = 0;         
    float  sx      = 0;         
    float  sy      = 0;         
    int    bounces = 0;         

    export vector refl       = 0.5;  
    export vector v          = 0;    
    export int    bouncetype = 0;    
    export float  pdf        = 0;    

    int mybounces = 0;


    vector  ng  = 0;  


    float   alpha = 0.1;  
    float   gamma = 2.0;
    vector  F0 = 0.04;
    int     model = 0;
    )
{






        float alphaC = alpha_clamp(alpha);

    float alphaSqr = alphaC*alphaC;
    float rho = 0.0;
    if ( gamma == 1.0 ) {
        rho = log(alphaC)/(-1.0+alphaSqr);
    } else {
        rho = -0.5 * (-1.0+pow(alphaC,2.0*(1.0-gamma))) / 
                     ((-1.0+alphaSqr)*(-1.0+gamma));
    }

    refl = set(rho,rho,rho);

    bouncetype = bounces & mybounces;

    if(bouncetype) {

        vector framex = 0.0;
        vector framey = 0.0;
        vector nn = normalize(ng);
        makebasis(framex, framey, nn, u);
        vector refl_frame[] = array(framex, framey, nn);
        matrix3 from_rspace = matrix3(refl_frame);
        matrix3 to_rspace = transpose(from_rspace);

        vector  wo  = normalize(u*to_rspace);

        float cosThetaSqr = 1.0/(1.0-alphaSqr);
        if ( gamma == 1.0 ) {

            cosThetaSqr *= 1.0-pow(alphaSqr, sx);
        } else {
            float c_gamma = 1.0 - gamma;
            cosThetaSqr *= 1.0-pow(pow(alphaSqr,
                                   c_gamma)*(1.0-sx)+sx, 1.0/c_gamma);
        }
        float cosTheta = sqrt(cosThetaSqr);
        float sinTheta = sqrt(max(0.0,1.0-cosThetaSqr));
        float phi = sy * 6.28318530717958647692 ;
        vector wh  = SphericalDirection(sinTheta, cosTheta, phi);


        if (!SameHemisphere(wo,wh)) {
            wh = -wh;
        }

        if(wh.z > 0.0) {
            vector wi = 2.0*dot(wo,wh)*wh - wo;

            if ( wi.z <= 0.0 ) {
                pdf = 0.0;
                refl = 0.0;
            } else {
                float Ndotu = wo.z;
                float Ndotv = wi.z;
                float udoth = dot(wo,wh);
                float a_udoth = abs(udoth);
                float a_Ndotu = abs(wo.z);

                float pdf_h_to_wi = 1.0 / (4.0*a_udoth);

                vector F = 1.0;
                float G = 1.0;
                float D = 1.0;
                float alphaSqrM1 = alphaSqr - 1.0;

                D = 1.0/pow(cosThetaSqr*alphaSqrM1+1.0,gamma);




                pdf = D * wh.z;
                pdf /= rho;
                pdf *= pdf_h_to_wi;
                if ( ! model ) {
                    F = F0 + (1.0-F0) * schlick_f(a_udoth);
                    G = smith_g(a_Ndotu, alphaC) * smith_g(Ndotv, alphaC); 






                    refl *=  F * G * Ndotv;


                    refl /= pdf_h_to_wi * wh.z;
                }
            }
            v    = normalize(wi*from_rspace);
        }
    }
}
